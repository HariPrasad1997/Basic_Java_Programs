<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;test.FindEachElementOccuranceFromGivenString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{FindEachElementOccuranceFromGivenString.java" name="collect" replace="true" selection="247 106" stamp="1710251296185" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() &gt; 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;test.FindAllDuplicateElementsFromGivenString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() &gt; 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{FindAllDuplicateElementsFromGivenString.java" name="collect" replace="true" selection="269 217" stamp="1710251686549" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect2&apos;&#x0A;- Destination method: &apos;test.FindAllDuplicateElementsFromGivenString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{FindAllDuplicateElementsFromGivenString.java" name="collect2" replace="true" selection="618 211" stamp="1710251834270" varType="false" version="1.0"/>&#x0A;<refactoring comment="Move 2 elements to &apos;Practise_Interview_Examples/src/java8Example&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Destination element: &apos;Practise_Interview_Examples/src/java8Example&apos;&#x0A;- Original elements:&#x0A;     test.FindEachElementOccuranceFromGivenString.java&#x0A;     test.FindAllDuplicateElementsFromGivenString.java&#x0A;- Update references to refactored element" description="Move compilation units" destination="/src&lt;java8Example" element1="/src&lt;test{FindEachElementOccuranceFromGivenString.java" element2="/src&lt;test{FindAllDuplicateElementsFromGivenString.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1710251935282" units="2" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindSecondHighestElementFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindSecondHighestElementFromGivenArray.java" name="collect" replace="true" selection="269 94" stamp="1710252076753" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted().collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect2&apos;&#x0A;- Destination method: &apos;java8Example.FindSecondHighestElementFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted().collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindSecondHighestElementFromGivenArray.java" name="collect2" replace="true" selection="731 69" stamp="1710252571721" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce&apos; from expression &apos;Arrays.stream(inputStrings).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;reduce&apos;&#x0A;- Destination method: &apos;java8Example.FindLongestStringFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(inputStrings).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindLongestStringFromGivenArray.java" name="reduce" replace="true" selection="244 100" stamp="1710252878063" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;asInt&apos; from expression &apos;Arrays.stream(numbers).max().getAsInt()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;asInt&apos;&#x0A;- Destination method: &apos;java8Example.FindElementsStartWith1.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).max().getAsInt()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;asInt&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindElementsStartWith1.java" name="asInt" replace="true" selection="189 40" stamp="1710253368917" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(numbers).boxed().map(n -&gt; n + &quot;&quot;).filter(x -&gt; x.startsWith(&quot;1&quot;)).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindElementsStartWith1.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().map(n -&gt; n + &quot;&quot;).filter(x -&gt; x.startsWith(&quot;1&quot;)).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindElementsStartWith1.java" name="collect" replace="true" selection="225 107" stamp="1710253619810" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;join&apos; from expression &apos;String.join(&quot;-&quot;,numbers)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;join&apos;&#x0A;- Destination method: &apos;java8Example.StringJoinExample.main(...)&apos;&#x0A;- Variable expression: &apos;String.join(&quot;-&quot;,numbers)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;join&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{StringJoinExample.java" name="join" replace="true" selection="148 26" stamp="1710254230510" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;rangeClosed&apos; from expression &apos;IntStream.rangeClosed(0,10)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;rangeClosed&apos;&#x0A;- Destination method: &apos;java8Example.SkipAndLimitExample.main(...)&apos;&#x0A;- Variable expression: &apos;IntStream.rangeClosed(0,10)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;rangeClosed&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{SkipAndLimitExample.java" name="rangeClosed" replace="true" selection="138 29" stamp="1710254320815" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;evenNumbers&apos; from expression &apos;numbers.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;evenNumbers&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;evenNumbers&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="evenNumbers" replace="true" selection="299 70" stamp="1710254774829" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;integer&apos; from expression &apos;numbers.stream().filter(x -&gt; x % 2 != 0).findFirst().get()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;integer&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().filter(x -&gt; x % 2 != 0).findFirst().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;integer&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="integer" replace="true" selection="455 59" stamp="1710254844015" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;doubleValue&apos; from expression &apos;numbers.stream().map(x -&gt; x * x).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;doubleValue&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().map(x -&gt; x * x).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;doubleValue&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="doubleValue" replace="true" selection="648 61" stamp="1710254998357" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(input).map(String::toUpperCase).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input).map(String::toUpperCase).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="collect" replace="true" selection="866 75" stamp="1710255118215" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;strings.stream().filter(x -&gt; x.startsWith(&quot;A&quot;)).findFirst().get()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;string&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;strings.stream().filter(x -&gt; x.startsWith(&quot;A&quot;)).findFirst().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="string" replace="true" selection="1088 66" stamp="1710255322284" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;descendingOrder&apos; from expression &apos;numbers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;descendingOrder&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;descendingOrder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="descendingOrder" replace="true" selection="1256 80" stamp="1710255385290" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;ascendingOrder&apos; from expression &apos;numbers.stream().sorted().collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;ascendingOrder&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().sorted().collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;ascendingOrder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="ascendingOrder" replace="true" selection="1429 55" stamp="1710255444049" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="sum" replace="true" selection="1619 41" stamp="1710255522272" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;longestString&apos; from expression &apos;strings.stream().reduce((s1,s2) -&gt; s1.length() &gt; s2.length()?s1:s2).get()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;longestString&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;strings.stream().reduce((s1,s2) -&gt; s1.length() &gt; s2.length()?s1:s2).get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;longestString&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="longestString" replace="true" selection="1780 78" stamp="1710255674495" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;groupingBy&apos; from expression &apos;numbers.stream().collect(Collectors.groupingBy(n -&gt; n % 3))&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;groupingBy&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().collect(Collectors.groupingBy(n -&gt; n % 3))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;groupingBy&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="groupingBy" replace="true" selection="1962 60" stamp="1710261852749" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;numbers.stream().collect(Collectors.toMap(n -&gt; n,n -&gt; &quot;Numbers &quot; + n))&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect2&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().collect(Collectors.toMap(n -&gt; n,n -&gt; &quot;Numbers &quot; + n))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="collect2" replace="true" selection="2256 70" stamp="1710262037286" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect3&apos; from expression &apos;Stream.concat(numbers.stream(),Arrays.asList(11,21,13).stream().distinct()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect3&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;Stream.concat(numbers.stream(),Arrays.asList(11,21,13).stream().distinct()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="collect3" replace="true" selection="2456 106" stamp="1710262212760" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;count&apos; from expression &apos;numbers.parallelStream().filter(n -&gt; n % 2 == 0).count()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;count&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.parallelStream().filter(n -&gt; n % 2 == 0).count()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;count&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="count" replace="true" selection="2701 57" stamp="1710262359963" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;ofNullable&apos; from expression &apos;Optional.ofNullable(name)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;ofNullable&apos;&#x0A;- Destination method: &apos;java8Example.BasicsOfJava8Methods.main(...)&apos;&#x0A;- Variable expression: &apos;Optional.ofNullable(name)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;ofNullable&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{BasicsOfJava8Methods.java" name="ofNullable" replace="true" selection="2903 26" stamp="1710262460315" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;secondHighest&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;secondHighest&apos;&#x0A;- Destination method: &apos;java8Example.SecondHighestElement.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;secondHighest&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{SecondHighestElement.java" name="secondHighest" replace="true" selection="203 91" stamp="1710263268044" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.stream().sorted(Comparator.comparing(Employee::getSalary)).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindEmployeeWithHighestSalary.main(...)&apos;&#x0A;- Variable expression: &apos;employees.stream().sorted(Comparator.comparing(Employee::getSalary)).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindEmployeeWithHighestSalary.java" name="collect" replace="true" selection="565 98" stamp="1710264053298" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDept,Collectors.reducing(BinaryOperator.maxBy(Comparator.comparing(Employee::getSalary)))))&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindEmployeeWithHighestSalary.main(...)&apos;&#x0A;- Variable expression: &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDept,Collectors.reducing(BinaryOperator.maxBy(Comparator.comparing(Employee::getSalary)))))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindEmployeeWithHighestSalary.java" name="collect" replace="true" selection="607 154" stamp="1710264464062" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(numbers).boxed().map(num -&gt; num + &quot;&quot;).filter(x -&gt; x.startsWith(&quot;2&quot;)).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindElementsStartWith2.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().map(num -&gt; num + &quot;&quot;).filter(x -&gt; x.startsWith(&quot;2&quot;)).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindElementsStartWith2.java" name="collect" replace="true" selection="217 112" stamp="1710264924002" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce&apos; from expression &apos;Arrays.stream(names).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;reduce&apos;&#x0A;- Destination method: &apos;java8Example.LongestStringFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(names).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{LongestStringFromGivenArray.java" name="reduce" replace="true" selection="226 93" stamp="1710265434439" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;Arrays.stream(names).max(Comparator.comparing(String::length)).get()&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;string&apos;&#x0A;- Destination method: &apos;java8Example.LongestStringFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(names).max(Comparator.comparing(String::length)).get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{LongestStringFromGivenArray.java" name="string" replace="true" selection="411 69" stamp="1710265604500" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.FindFirstNonRepeatedCharactersFromString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindFirstNonRepeatedCharactersFromString.java" name="collect" replace="true" selection="259 105" stamp="1710265911182" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect2&apos;&#x0A;- Destination method: &apos;java8Example.FindFirstNonRepeatedCharactersFromString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(input.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{FindFirstNonRepeatedCharactersFromString.java" name="collect2" replace="true" selection="485 214" stamp="1710266042245" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;input.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;java8Example.SortingOfListElements.main(...)&apos;&#x0A;- Variable expression: &apos;input.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{SortingOfListElements.java" name="collect" replace="true" selection="306 78" stamp="1710267211313" varType="false" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;collect&apos; in &apos;java8Example.SortingOfListElements.main(...)&apos; to &apos;ascendingOrder&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Original element: &apos;java8Example.SortingOfListElements.main(String[]).collect&apos;&#x0A;- Renamed element: &apos;collect&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;collect&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;java8Example{SortingOfListElements.java[SortingOfListElements~main~\[QString;@collect!306!406!319!325!QList\&lt;QString;&gt;;!0!false" name="ascendingOrder" references="true" stamp="1710267241798" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;descendingOrder&apos; from expression &apos;input.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Practise_Interview_Examples&apos;&#x0A;- Variable name: &apos;descendingOrder&apos;&#x0A;- Destination method: &apos;java8Example.SortingOfListElements.main(...)&apos;&#x0A;- Variable expression: &apos;input.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;descendingOrder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Example{SortingOfListElements.java" name="descendingOrder" replace="true" selection="458 78" stamp="1710267284458" varType="false" version="1.0"/>
</session>
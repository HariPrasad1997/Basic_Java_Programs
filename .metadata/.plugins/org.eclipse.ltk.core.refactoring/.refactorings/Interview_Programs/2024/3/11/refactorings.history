<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;countries.stream().map(con -&gt; con.toUpperCase()).collect(Collectors.joining(&quot;,&quot;))&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;test.SeparateAllNamesusingJava8.main(...)&apos;&#x0A;- Variable expression: &apos;countries.stream().map(con -&gt; con.toUpperCase()).collect(Collectors.joining(&quot;,&quot;))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{SeparateAllNamesusingJava8.java" name="collect" replace="true" selection="269 82" stamp="1710080623765" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;Arrays.stream(arr).sum()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;test.AddSumOfTheArrayElements.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(arr).sum()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{AddSumOfTheArrayElements.java" name="sum" replace="true" selection="163 25" stamp="1710080794672" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;test.AddSumOfTheArrayElements.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{AddSumOfTheArrayElements.java" name="sum" replace="true" selection="209 41" stamp="1710080956137" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;numbers.stream().map(x -&gt; x + sum).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;test.AddSumOfTheArrayElements.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().map(x -&gt; x + sum).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{AddSumOfTheArrayElements.java" name="collect" replace="true" selection="330 62" stamp="1710081037788" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;test.AddSumOfTheArrayElements.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().reduce(0,Integer::sum)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{AddSumOfTheArrayElements.java" name="sum" replace="true" selection="384 41" stamp="1710081376613" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;addition&apos; from expression &apos;numbers.stream().map(add -&gt; add + sum).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;addition&apos;&#x0A;- Destination method: &apos;test.AddSumOfTheArrayElements.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().map(add -&gt; add + sum).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;addition&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{AddSumOfTheArrayElements.java" name="addition" replace="true" selection="478 68" stamp="1710081428488" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(numbers).boxed().distinct().collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;javaTest.FindDuplicatesFromAnArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().distinct().collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindDuplicatesFromAnArray.java" name="collect" replace="true" selection="228 71" stamp="1710350077571" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;withoutDuplicates&apos; from expression &apos;Arrays.stream(numbers).boxed().distinct().collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;withoutDuplicates&apos;&#x0A;- Destination method: &apos;javaTest.FindDuplicatesFromAnArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().distinct().collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;withoutDuplicates&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindDuplicatesFromAnArray.java" name="withoutDuplicates" replace="true" selection="719 71" stamp="1710350940086" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sorted&apos; from expression &apos;Arrays.stream(numbers).sorted()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;sorted&apos;&#x0A;- Destination method: &apos;javaTest.FindSecondSmallestNumber.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).sorted()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sorted&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSecondSmallestNumber.java" name="sorted" replace="true" selection="212 32" stamp="1710351171095" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;descendingOrder&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;descendingOrder&apos;&#x0A;- Destination method: &apos;javaTest.FindSecondSmallestNumber.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;descendingOrder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSecondSmallestNumber.java" name="descendingOrder" replace="true" selection="469 94" stamp="1710351335518" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;secondHighest&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;secondHighest&apos;&#x0A;- Destination method: &apos;javaTest.FindSecondSmallestNumber.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;secondHighest&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSecondSmallestNumber.java" name="secondHighest" replace="true" selection="661 91" stamp="1710351476637" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;Arrays.stream(numbers).sum()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;javaTest.FindSumAndInteger.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).sum()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSumAndInteger.java" name="sum" replace="true" selection="175 29" stamp="1710355230097" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;average&apos; from expression &apos;Arrays.stream(numbers).average().getAsDouble()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;average&apos;&#x0A;- Destination method: &apos;javaTest.FindSumAndInteger.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).average().getAsDouble()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;average&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSumAndInteger.java" name="average" replace="true" selection="217 47" stamp="1710355288769" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;countOfNumbers&apos; from expression &apos;Arrays.stream(numbers).count()&apos;&#x0A;- Original project: &apos;Interview_Programs&apos;&#x0A;- Variable name: &apos;countOfNumbers&apos;&#x0A;- Destination method: &apos;javaTest.FindSumAndInteger.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).count()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;countOfNumbers&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;javaTest{FindSumAndInteger.java" name="countOfNumbers" replace="true" selection="287 31" stamp="1710355368925" varType="false" version="1.0"/>
</session>
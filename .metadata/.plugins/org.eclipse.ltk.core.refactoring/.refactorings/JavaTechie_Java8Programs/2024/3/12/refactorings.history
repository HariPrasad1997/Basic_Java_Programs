<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;occurance&apos; from expression &apos;Arrays.stream(s.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;occurance&apos;&#x0A;- Destination method: &apos;practise_Programs.FindEachOccuranceOfTheString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(s.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;occurance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{FindEachOccuranceOfTheString.java" name="occurance" replace="true" selection="244 102" stamp="1711116680057" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;duplicateStrings&apos; from expression &apos;Arrays.stream(s.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() &gt; 1).map(Map.Entry::getValue).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;duplicateStrings&apos;&#x0A;- Destination method: &apos;practise_Programs.FindEachOccuranceOfTheString.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(s.split(&quot;&quot;)).collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting())).entrySet().stream().filter(x -&gt; x.getValue() &gt; 1).map(Map.Entry::getValue).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;duplicateStrings&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{FindEachOccuranceOfTheString.java" name="duplicateStrings" replace="true" selection="548 241" stamp="1711116982879" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;first_non_repeat_Elements&apos; from expression &apos;occurance.entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;first_non_repeat_Elements&apos;&#x0A;- Destination method: &apos;practise_Programs.FindEachOccuranceOfTheString.main(...)&apos;&#x0A;- Variable expression: &apos;occurance.entrySet().stream().filter(x -&gt; x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;first_non_repeat_Elements&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{FindEachOccuranceOfTheString.java" name="first_non_repeat_Elements" replace="true" selection="930 113" stamp="1711117156487" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;secondHighest&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;secondHighest&apos;&#x0A;- Destination method: &apos;practise_Programs.SecondHighestNumberInAnArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;secondHighest&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{SecondHighestNumberInAnArray.java" name="secondHighest" replace="true" selection="231 91" stamp="1711117407225" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;secondLowest&apos; from expression &apos;Arrays.stream(numbers).boxed().sorted().skip(1).findAny().get()&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;secondLowest&apos;&#x0A;- Destination method: &apos;practise_Programs.SecondHighestNumberInAnArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().sorted().skip(1).findAny().get()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;secondLowest&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{SecondHighestNumberInAnArray.java" name="secondLowest" replace="true" selection="471 64" stamp="1711117581867" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;longestString&apos; from expression &apos;Arrays.stream(names).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;longestString&apos;&#x0A;- Destination method: &apos;practise_Programs.FindLongestStringFromGivenArray.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(names).reduce((word1,word2) -&gt; word1.length() &gt; word2.length()?word1:word2)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;longestString&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{FindLongestStringFromGivenArray.java" name="longestString" replace="true" selection="232 95" stamp="1711117806494" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;startsWith1&apos; from expression &apos;Arrays.stream(numbers).boxed().map(n -&gt; n + &quot; &quot;).filter(x -&gt; x.startsWith(&quot;1&quot;)).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;startsWith1&apos;&#x0A;- Destination method: &apos;practise_Programs.FindNumbersStartWithOne.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(numbers).boxed().map(n -&gt; n + &quot; &quot;).filter(x -&gt; x.startsWith(&quot;1&quot;)).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;startsWith1&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{FindNumbersStartWithOne.java" name="startsWith1" replace="true" selection="238 108" stamp="1711118425726" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;join&apos; from expression &apos;String.join(&quot;/&quot;,nums)&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;join&apos;&#x0A;- Destination method: &apos;practise_Programs.StringJoinExample.main(...)&apos;&#x0A;- Variable expression: &apos;String.join(&quot;/&quot;,nums)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;join&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practise_Programs{StringJoinExample.java" name="join" replace="true" selection="209 23" stamp="1711118779168" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;books&apos; from expression &apos;bookService.getBooks()&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;books&apos;&#x0A;- Destination method: &apos;java8Features.BookController.main(...)&apos;&#x0A;- Variable expression: &apos;bookService.getBooks()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;books&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features{BookController.java" name="books" replace="true" selection="145 23" stamp="1711188363122" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;even&apos; from expression &apos;integers.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;even&apos;&#x0A;- Destination method: &apos;java8Features.functionalInterfaces.PredicateDemo.main(...)&apos;&#x0A;- Variable expression: &apos;integers.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;even&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.functionalInterfaces{PredicateDemo.java" name="even" replace="true" selection="1043 71" stamp="1711190499008" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;orElseGet&apos; from expression &apos;integers.stream().findAny().orElseGet(() -&gt; &quot;Hari&quot;)&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;orElseGet&apos;&#x0A;- Destination method: &apos;java8Features.functionalInterfaces.SupplierDemo.main(...)&apos;&#x0A;- Variable expression: &apos;integers.stream().findAny().orElseGet(() -&gt; &quot;Hari&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;orElseGet&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.functionalInterfaces{SupplierDemo.java" name="orElseGet" replace="true" selection="349 52" stamp="1711190860834" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;orElseGet&apos; from expression &apos;names.stream().filter(elements -&gt; elements.startsWith(&quot;H&quot;)).findFirst().orElseGet(() -&gt; &quot;Hari&quot;)&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;orElseGet&apos;&#x0A;- Destination method: &apos;java8Features.streamApi.ForEachDemo.main(...)&apos;&#x0A;- Variable expression: &apos;names.stream().filter(elements -&gt; elements.startsWith(&quot;H&quot;)).findFirst().orElseGet(() -&gt; &quot;Hari&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;orElseGet&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.streamApi{ForEachDemo.java" name="orElseGet" replace="true" selection="477 96" stamp="1711214088011" varType="false" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;orElseGet&apos; in &apos;java8Features.streamApi.ForEachDemo.main(...)&apos; to &apos;nameStartWith_H&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Original element: &apos;java8Features.streamApi.ForEachDemo.main(String[]).orElseGet&apos;&#x0A;- Renamed element: &apos;orElseGet&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;orElseGet&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;java8Features.streamApi{ForEachDemo.java[ForEachDemo~main~\[QString;@orElseGet!477!594!484!492!QString;!0!false" name="nameStartWith_H" references="true" stamp="1711214145584" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;Ascending&apos; from expression &apos;list.stream().sorted().collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;Ascending&apos;&#x0A;- Destination method: &apos;java8Features.streamApi.SortListDemo.main(...)&apos;&#x0A;- Variable expression: &apos;list.stream().sorted().collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;Ascending&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.streamApi{SortListDemo.java" name="Ascending" replace="true" selection="457 52" stamp="1711215638578" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;descending&apos; from expression &apos;list.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;descending&apos;&#x0A;- Destination method: &apos;java8Features.streamApi.SortListDemo.main(...)&apos;&#x0A;- Variable expression: &apos;list.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;descending&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.streamApi{SortListDemo.java" name="descending" replace="true" selection="572 78" stamp="1711215712051" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sortingBasedOnSalary&apos; from expression &apos;EmployeeImpl.getEmployees().stream().sorted(Comparator.comparing(Employee::getSalary)).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;sortingBasedOnSalary&apos;&#x0A;- Destination method: &apos;java8Features.streamApi.SortListDemo.main(...)&apos;&#x0A;- Variable expression: &apos;EmployeeImpl.getEmployees().stream().sorted(Comparator.comparing(Employee::getSalary)).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sortingBasedOnSalary&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.streamApi{SortListDemo.java" name="sortingBasedOnSalary" replace="true" selection="732 116" stamp="1711216111333" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;descendingOreder&apos; from expression &apos;EmployeeImpl.getEmployees().stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;JavaTechie_Java8Programs&apos;&#x0A;- Variable name: &apos;descendingOreder&apos;&#x0A;- Destination method: &apos;java8Features.streamApi.SortListDemo.main(...)&apos;&#x0A;- Variable expression: &apos;EmployeeImpl.getEmployees().stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;descendingOreder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8Features.streamApi{SortListDemo.java" name="descendingOreder" replace="true" selection="957 132" stamp="1711216183509" varType="false" version="1.0"/>
</session>